plugins {
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

dependencies {
    // for type inference
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    compileOnly 'org.projectlombok:lombok:1.18.8'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.8'
    testCompileOnly 'org.projectlombok:lombok:1.18.8'
    implementation 'com.google.guava:guava:25.1-jre'

    // for logging
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'org.slf4j:slf4j-api:1.7.25'

    // cassandra
    annotationProcessor 'com.datastax.oss:java-driver-mapper-processor:4.3.1'
    testAnnotationProcessor 'com.datastax.oss:java-driver-mapper-processor:4.3.1'

    implementation 'com.datastax.oss:java-driver-core:4.3.1'
    implementation 'com.datastax.oss:java-driver-mapper-runtime:4.3.1'
    implementation 'com.datastax.oss:java-driver-query-builder:4.3.1'

    implementation 'io.dropwizard.metrics:metrics-jmx:4.1.4'

    // config
    implementation 'com.typesafe:config:1.4.0'

    // testing
    testImplementation 'org.awaitility:awaitility:4.0.2'
    testImplementation 'org.cassandraunit:cassandra-unit:4.3.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
}

application {
    sourceCompatibility = 1.11
    targetCompatibility = 1.11
    mainClassName = 'sample.cassandra.client.App'
}

tasks.withType(JavaExec) {
    systemProperties System.properties
}

task executableJar(type: Jar) {
	manifest {
        attributes 'Main-Class': 'sample.cassandra.client.App'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

sourceSets.main.java.srcDir "build/generated/sources/annotationProcessor/java/main"

// for debugging
tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}

test {
    useJUnitPlatform()
    forkEvery(1)
    maxParallelForks(1)
    testLogging {
        exceptionFormat "full" // default is "short"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }

    jvmArgs '--add-opens', 'java.base/java.io=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.nio=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/java.util=ALL-UNNAMED'
    jvmArgs '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED'

    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}

task deleteUnneededResources(type: Delete) {
    delete fileTree('build/resources') {
        include '**/application.*'
    }
}
processTestResources.finalizedBy deleteUnneededResources
